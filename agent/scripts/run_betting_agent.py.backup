import sys
import os
import asyncio

# Add the project root to the Python path
project_root = os.path.abspath(os.path.join(os.path.dirname(__file__), '..', '..'))
sys.path.insert(0, project_root)

from agent.src.agent.betting import BettingAgent
from agent.src.db.sqlite import SQLiteDB
from agent.src.sensor.trading import TradingSensor
from agent.src.genner import get_genner
from agent.src.container import ContainerManager
from agent.src.client.rag import RAGClient
from agent.src.services.overtime_service import OvertimeService
from agent.src.services.news_service import NewsService
from agent.src.services.wallet_service import WalletService
from agent.src.services.the_odds_service import TheOddsService
from agent.src.services.weather_service import WeatherService
from agent.src.services.search_service import SearchService
from agent.src.client.openrouter import OpenRouter
import docker
import time
import os

async def main():
    # Initialize components with proper arguments
    db = SQLiteDB(db_path="/app/agent/db/superior-agents.db")
    sensor = TradingSensor(
        eth_address=os.getenv("WALLET_ADDRESS", "0x0000000000000000000000000000000000000000"),
        infura_project_id=os.getenv("ARBITRUM_RPC_URL", "https://arb1.arbitrum.io/rpc"),
        etherscan_api_key=os.getenv("ETHERSCAN_API_KEY", "mock_api_key")
    )
    or_client = OpenRouter(api_key=os.getenv("OPENROUTER_API_KEY"))
    genner = get_genner(backend="gemini", stream_fn=None, or_client=or_client)
    try:
        docker_client = docker.from_env()
        container_manager = ContainerManager(
            client=docker_client,
            container_identifier="betting-agent-main",
            host_cache_folder="/tmp",
            in_con_env={}
        )
    except Exception as e:
        print(f"Container manager initialization failed: {e}")
        container_manager = None
    rag_client = RAGClient(
        agent_id="betting-agent-001",
        session_id="session-001",
        base_url="http://rag-api:32771"
    )
    overtime_service = OvertimeService()
    news_service = NewsService()
    wallet_service = WalletService()
    the_odds_service = TheOddsService(os.getenv('THE_ODDS_API_KEY')) if os.getenv('THE_ODDS_API_KEY') else None
    weather_service = WeatherService() if os.getenv('OPENWEATHERMAP_API_KEY') else None
    search_service = SearchService()

    wallet_address = os.getenv("WALLET_ADDRESS")
    if wallet_address:
        eth_balance = wallet_service.get_eth_balance(wallet_address)
    else:
        eth_balance = 0.0

    agent = BettingAgent(
            db=db,
            sensor=sensor,
            genner=genner,
            container_manager=container_manager,
            rag_client=rag_client,
            overtime_service=overtime_service,
            news_service=news_service,
            wallet_service=wallet_service,
            the_odds_service=the_odds_service,
            weather_service=weather_service,
            search_service=search_service,
            eth_balance=eth_balance
        )
        
    print("--- Agent Initialized ---")
    
    while True:
        cycle_id = agent.record_cycle_start()
        print(f"--- Starting Agent Cycle: {cycle_id} ---")

        agent.check_and_update_pending_bets()
        
        games_data = agent.get_sports_data()
        
        if games_data:
            enriched_games = agent.enrich_games_with_odds(games_data)
            betting_decisions = agent.formulate_betting_strategy(enriched_games)
            
            if betting_decisions:
                wallet_balance = wallet_service.get_usdc_balance(wallet_address) if wallet_address else 0
                final_decisions = agent.manage_bankroll(betting_decisions, wallet_balance)
                
                if os.getenv("EXECUTE_ON_CHAIN") != "ANALYSIS_ONLY":
                    betting_code = agent.generate_betting_code(final_decisions)
                    if betting_code and container_manager:
                        result = container_manager.run_code_in_con(betting_code, "betting")
                        if result.is_ok():
                            output, _ = result.unwrap()
                            print(f"--- Betting code execution result: {output} ---")
                        else:
                            print(f"--- Betting code execution failed: {result.unwrap_err()} ---")
                else:
                    print("--- ANALYSIS-ONLY MODE: SAVING RECOMMENDATIONS FOR MANUAL EXECUTION ---")
                    agent.save_recommendations_to_db(final_decisions)
            else:
                print("--- No betting decisions generated. Ending cycle. ---")
                final_decisions = []
            
            agent.record_cycle_end(cycle_id, len(games_data), len(betting_decisions) if betting_decisions else 0)
        else:
            print("--- No sports data available. Ending cycle. ---")
            final_decisions = []
            agent.record_cycle_end(cycle_id, 0, 0)

        print("--- CYCLE COMPLETE. Agent sleeping until next scheduled time. ---")
        time.sleep(8 * 60 * 60)

if __name__ == "__main__":
    asyncio.run(main())